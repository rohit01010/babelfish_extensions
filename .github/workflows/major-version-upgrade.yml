name: Major Version Upgrade Tests for empty database
on: [push, pull_request]

jobs:
  run-babelfish-mvu-tests:
    env:
      OLD_INSTALL_DIR: psql_source
      IMD_INSTALL_DIR: psql_imd
      NEW_INSTALL_DIR: psql_target
      ENGINE_BRANCH_FROM: BABEL_1_2_STABLE__PG_13_6
      EXTENSION_BRANCH_FROM: BABEL_1_2_STABLE
      ENGINE_BRANCH_NEXT: BABEL_2_X_DEV__PG_14_X
      EXTENSION_BRANCH_NEXT: BABEL-4519-2-X-DEV
      ENGINE_BRANCH_FINAL: BABEL_3_X_DEV__PG_15_X
      EXTENSION_BRANCH_FINAL: BABEL-4519

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Install Dependencies
        id: install-dependencies
        if: always()
        uses: ./.github/composite-actions/install-dependencies

      - name: Build Modified Postgres using ${{env.ENGINE_BRANCH_FROM}}
        id: build-modified-postgres-old
        if: always() && steps.install-dependencies.outcome == 'success'
        run: |
          cd ..
          git clone --branch ${{env.ENGINE_BRANCH_FROM}} https://github.com/babelfish-for-postgresql/postgresql_modified_for_babelfish.git
          cd postgresql_modified_for_babelfish
          ./configure --prefix=$HOME/${{env.OLD_INSTALL_DIR}} --with-python PYTHON=/usr/bin/python3.8 --enable-cassert CFLAGS="-ggdb" --with-libxml --with-uuid=ossp --with-icu
          make clean
          make -j 4 2>error.txt
          make install
          make check
          cd contrib && make && sudo make install
        shell: bash
      
      - name: Compile ANTLR
        id: compile-antlr
        if: always() && steps.build-modified-postgres-old.outcome == 'success'
        uses: ./.github/composite-actions/compile-antlr
        with:
          install_dir: ${{env.OLD_INSTALL_DIR}}

      - uses: actions/checkout@v2
        with:
          repository: babelfish-for-postgresql/babelfish_extensions
          ref: ${{env.EXTENSION_BRANCH_FROM}}
      
      - name: Build Extensions using ${{env.EXTENSION_BRANCH_FROM}}
        id: build-extensions-old
        run: |
          export PG_CONFIG=~/${{env.OLD_INSTALL_DIR}}/bin/pg_config
          export PG_SRC=~/work/babelfish_extensions/postgresql_modified_for_babelfish
          export cmake=$(which cmake)
          cd contrib/babelfishpg_money
          make && make install
          cd ../babelfishpg_common
          make && make install
          cd ../babelfishpg_tds
          make && make install
          cd ../babelfishpg_tsql
          make && make install

      - name: Install Extensions using ${{env.EXTENSION_BRANCH_FROM}}
        id: install-extensions-old
        if: always() && steps.build-extensions-old.outcome == 'success'
        run: |
          cd ~
          export PATH=/opt/mssql-tools/bin:$PATH
          ~/${{env.OLD_INSTALL_DIR}}/bin/initdb -D ~/${{env.OLD_INSTALL_DIR}}/data
          ~/${{env.OLD_INSTALL_DIR}}/bin/pg_ctl -D ~/${{env.OLD_INSTALL_DIR}}/data -l logfile13 start
          cd ${{env.OLD_INSTALL_DIR}}/data
          sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" postgresql.conf
          sudo sed -i "s/#shared_preload_libraries = ''/shared_preload_libraries = 'babelfishpg_tds, pg_stat_statements'/g" postgresql.conf
          ipaddress=$(ifconfig eth0 | grep 'inet ' | cut -d: -f2 | awk '{ print $2}')
          # Allow only runner to have trust authentication, all other users must provide a password
          {
            sudo echo "local   all             runner                                   trust"
            sudo echo "local   all             all                                      md5"
            sudo echo "host    all             runner          127.0.0.1/32             trust"
            sudo echo "host    all             runner          $ipaddress/32            trust"
            sudo echo "host    all             all             0.0.0.0/0                md5"
            sudo echo "host    all             all             ::/0                     md5"
          } > pg_hba.conf
          sudo echo "babelfishpg_tsql.server_collation_name = 'chinese_prc_ci_as'" >> postgresql.conf #collation
          ~/${{env.OLD_INSTALL_DIR}}/bin/pg_ctl -D ~/${{env.OLD_INSTALL_DIR}}/data -l logfile13 restart
          cd ~/work/babelfish_extensions/babelfish_extensions/
          sudo ~/${{env.OLD_INSTALL_DIR}}/bin/psql -d postgres -U runner -v user="jdbc_user" -v db="jdbc_testdb" -f .github/scripts/create_extension.sql
          sqlcmd -S localhost -U jdbc_user -P 12345678 -Q "SELECT @@version GO"
        shell: bash
        
      - uses: actions/checkout@v2
        with:
          repository: rohit01010/babelfish_extensions
          ref: ${{env.EXTENSION_BRANCH_NEXT}}

      - name: Build Modified Postgres using latest version
        id: build-modified-postgres-next
        if: always() && steps.install-extensions-old.outcome == 'success'
        uses: ./.github/composite-actions/build-modified-postgres
        with:
          engine_branch: ${{env.ENGINE_BRANCH_NEXT}}
          install_dir: ${{env.IMD_INSTALL_DIR}}

      - name: Copy ANTLR
        run: cp "/usr/local/lib/libantlr4-runtime.so.4.9.3" ~/${{env.IMD_INSTALL_DIR}}/lib/

      - name: Build Extensions using latest version
        id: build-extensions-next
        if: always() && steps.build-modified-postgres-next.outcome == 'success'
        uses: ./.github/composite-actions/build-extensions
        with:
          install_dir: ${{env.IMD_INSTALL_DIR}}

      - name: Setup new data directory
        id: setup-new-datadir-next
        run: |
          cd ~
          ~/${{env.IMD_INSTALL_DIR}}/bin/initdb -D ~/${{env.IMD_INSTALL_DIR}}/data
          cd ~/${{env.IMD_INSTALL_DIR}}/data
          sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" postgresql.conf
          sudo sed -i "s/#shared_preload_libraries = ''/shared_preload_libraries = 'babelfishpg_tds, pg_stat_statements'/g" postgresql.conf
          ipaddress=$(ifconfig eth0 | grep 'inet ' | cut -d: -f2 | awk '{ print $2}')
          # Allow only runner to have trust authentication, all other users must provide a password
          {
            sudo echo "local   all             runner                                   trust"
            sudo echo "local   all             all                                      md5"
            sudo echo "host    all             runner          127.0.0.1/32             trust"
            sudo echo "host    all             runner          $ipaddress/32            trust"
            sudo echo "host    all             all             0.0.0.0/0                md5"
            sudo echo "host    all             all             ::/0                     md5"
          } > pg_hba.conf
        shell: bash

      - name: Run pg_upgrade
        id: run-pg_upgrade
        if: always() && steps.setup-new-datadir-next.outcome == 'success'
        uses: ./.github/composite-actions/run-pg-upgrade
        with:
          pg_old_dir: $OLD_INSTALL_DIR
          pg_new_dir: $IMD_INSTALL_DIR

      - uses: actions/checkout@v2
        with:
          repository: rohit01010/babelfish_extensions
          ref: ${{env.EXTENSION_BRANCH_FINAL}}

      - name: Build Modified Postgres using latest version
        id: build-modified-postgres-new
        if: always() && steps.install-extensions-old.outcome == 'success'
        uses: ./.github/composite-actions/build-modified-postgres
        with:
          engine_branch: ${{env.ENGINE_BRANCH_FINAL}}
          install_dir: ${{env.NEW_INSTALL_DIR}}

      - name: Copy ANTLR
        run: cp "/usr/local/lib/libantlr4-runtime.so.4.9.3" ~/${{env.NEW_INSTALL_DIR}}/lib/

      - name: Build Extensions using latest version
        id: build-extensions-new
        if: always() && steps.build-modified-postgres-new.outcome == 'success'
        uses: ./.github/composite-actions/build-extensions
        with:
          install_dir: ${{env.NEW_INSTALL_DIR}}

      - name: Setup new data directory
        id: setup-new-datadir
        run: |
          cd ~
          ~/${{env.NEW_INSTALL_DIR}}/bin/initdb -D ~/${{env.NEW_INSTALL_DIR}}/data
          cd ~/${{env.NEW_INSTALL_DIR}}/data
          sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" postgresql.conf
          sudo sed -i "s/#shared_preload_libraries = ''/shared_preload_libraries = 'babelfishpg_tds, pg_stat_statements'/g" postgresql.conf
          ipaddress=$(ifconfig eth0 | grep 'inet ' | cut -d: -f2 | awk '{ print $2}')
          # Allow only runner to have trust authentication, all other users must provide a password
          {
            sudo echo "local   all             runner                                   trust"
            sudo echo "local   all             all                                      md5"
            sudo echo "host    all             runner          127.0.0.1/32             trust"
            sudo echo "host    all             runner          $ipaddress/32            trust"
            sudo echo "host    all             all             0.0.0.0/0                md5"
            sudo echo "host    all             all             ::/0                     md5"
          } > pg_hba.conf
        shell: bash

      - name: Run pg_upgrade
        id: run-pg_upgrade-final
        if: always() && steps.setup-new-datadir.outcome == 'success'
        uses: ./.github/composite-actions/run-pg-upgrade
        with:
          pg_old_dir: $IMD_INSTALL_DIR
          pg_new_dir: $NEW_INSTALL_DIR