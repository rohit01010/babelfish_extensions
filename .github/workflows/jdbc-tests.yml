name: JDBC Tests
on: [push, pull_request]

jobs:
  run-babelfish-jdbc-tests:
    strategy:
      fail-fast: false
      matrix:
        server_collation: [
          "arabic_ci_as",
          "bbf_unicode_cp1250_ci_as",
          "bbf_unicode_cp1251_ci_as",
          "bbf_unicode_cp1253_ci_as",
          "bbf_unicode_cp1254_ci_as",
          "bbf_unicode_cp1255_ci_as",
          "bbf_unicode_cp1256_ci_as",
          "bbf_unicode_cp1257_ci_as",
          "bbf_unicode_cp1258_ci_as",
          "bbf_unicode_cp1_ci_as",
          "bbf_unicode_cp874_ci_as",
          "bbf_unicode_general_ci_as",
          "bbf_unicode_general_pref_cs_as",
          "bbf_unicode_pref_cp1250_cs_as",
          "bbf_unicode_pref_cp1251_cs_as",
          "bbf_unicode_pref_cp1253_cs_as",
          "bbf_unicode_pref_cp1254_cs_as",
          "bbf_unicode_pref_cp1255_cs_as",
          "bbf_unicode_pref_cp1256_cs_as",
          "bbf_unicode_pref_cp1257_cs_as",
          "bbf_unicode_pref_cp1258_cs_as",
          "bbf_unicode_pref_cp1_cs_as",
          "bbf_unicode_pref_cp874_cs_as",
          "chinese_prc_ci_as",
          "cyrillic_general_ci_as",
          "estonian_ci_as",
          "finnish_swedish_ci_as",
          "french_ci_as",
          "greek_ci_as",
          "hebrew_ci_as",
          "japanese_ci_as",
          "korean_wansung_ci_as",
          "modern_spanish_ci_as",
          "mongolian_ci_as",
          "polish_ci_as",
          "thai_ci_as",
          "traditional_spanish_ci_as",
          "turkish_ci_as",
          "ukrainian_ci_as",
          "vietnamese_ci_as"
        ]
    env:
      INSTALL_DIR: psql
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        id: checkout

      - name: Install Dependencies
        id: install-dependencies
        if: always()
        uses: ./.github/composite-actions/install-dependencies

      - name: Build Modified Postgres
        id: build-modified-postgres
        if: always() && steps.install-dependencies.outcome == 'success'
        uses: ./.github/composite-actions/build-modified-postgres
      
      - name: Compile ANTLR
        id: compile-antlr
        if: always() && steps.build-modified-postgres.outcome == 'success'
        uses: ./.github/composite-actions/compile-antlr
      
      - name: Build Extensions
        id: build-extensions
        if: always() && steps.compile-antlr.outcome == 'success'
        uses: ./.github/composite-actions/build-extensions

      - name: Build tds_fdw Extension
        id: build-tds_fdw-extension
        if: always() && steps.build-extensions.outcome == 'success'
        uses: ./.github/composite-actions/build-tds_fdw-extension

      - name: Build PostGIS Extension
        id: build-postgis-extension
        if: always() && steps.build-tds_fdw-extension.outcome == 'success'
        uses: ./.github/composite-actions/build-postgis-extension

      - name: Install Extensions
        id: install-extensions
        if: always() && steps.build-postgis-extension.outcome == 'success'
        uses: ./.github/composite-actions/install-extensions

      - name: Run JDBC Tests
        id: jdbc
        if: always() && steps.install-extensions.outcome == 'success'
        timeout-minutes: 60
        run: |
          export PATH=~/${{env.INSTALL_DIR}}/bin:$PATH
          export PG_SRC=~/work/babelfish_extensions/postgresql_modified_for_babelfish
          cd test/JDBC/
          mvn test

      - name: Cleanup babelfish database
        id: cleanup
        if: always() && steps.install-extensions.outcome == 'success'
        run: |
          sudo ~/psql/bin/psql -d postgres -U runner -v user="jdbc_user" -v db="jdbc_testdb" -f .github/scripts/cleanup_babelfish_database.sql

      - name: Upload Log
        if: always() && steps.jdbc.outcome == 'failure'
        uses: actions/upload-artifact@v2
        with:
          name: postgres-log
          path: ~/psql/data/logfile
      
      # The test summary files contain paths with ':' characters, which is not allowed with the upload-artifact actions
      - name: Rename Test Summary Files
        id: test-file-rename
        if: always() && steps.jdbc.outcome == 'failure'
        run: |
          cd test/JDBC/Info
          timestamp=`ls -Art | tail -n 1`
          cd $timestamp
          mv $timestamp.diff ../output-diff.diff
          mv "$timestamp"_runSummary.log ../run-summary.log
      
      - name: Upload Run Summary 
        if: always() && steps.test-file-rename == 'success'
        uses: actions/upload-artifact@v2
        with:
          name: run-summary.log
          path: test/JDBC/Info/run-summary.log
      
      - name: Upload Output Diff
        if: always() && steps.jdbc.outcome == 'failure'
        uses: actions/upload-artifact@v2
        with:
          name: output-diff.diff
          path: test/JDBC/Info/output-diff.diff
